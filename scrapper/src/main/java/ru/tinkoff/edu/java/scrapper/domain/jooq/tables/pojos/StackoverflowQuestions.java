/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq.tables.pojos;


import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StackoverflowQuestions implements Serializable {

    private static final long serialVersionUID = 1L;

    private UUID id;
    private Long questionId;
    private OffsetDateTime createdAt;
    private OffsetDateTime updatedAt;
    private OffsetDateTime answersUpdatedAt;

    public StackoverflowQuestions() {}

    public StackoverflowQuestions(StackoverflowQuestions value) {
        this.id = value.id;
        this.questionId = value.questionId;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.answersUpdatedAt = value.answersUpdatedAt;
    }

    public StackoverflowQuestions(
        UUID id,
        Long questionId,
        OffsetDateTime createdAt,
        OffsetDateTime updatedAt,
        OffsetDateTime answersUpdatedAt
    ) {
        this.id = id;
        this.questionId = questionId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.answersUpdatedAt = answersUpdatedAt;
    }

    /**
     * Getter for <code>public.stackoverflow_questions.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.stackoverflow_questions.id</code>.
     */
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.stackoverflow_questions.question_id</code>.
     */
    public Long getQuestionId() {
        return this.questionId;
    }

    /**
     * Setter for <code>public.stackoverflow_questions.question_id</code>.
     */
    public void setQuestionId(Long questionId) {
        this.questionId = questionId;
    }

    /**
     * Getter for <code>public.stackoverflow_questions.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>public.stackoverflow_questions.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for <code>public.stackoverflow_questions.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>public.stackoverflow_questions.updated_at</code>.
     */
    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for
     * <code>public.stackoverflow_questions.answers_updated_at</code>.
     */
    public OffsetDateTime getAnswersUpdatedAt() {
        return this.answersUpdatedAt;
    }

    /**
     * Setter for
     * <code>public.stackoverflow_questions.answers_updated_at</code>.
     */
    public void setAnswersUpdatedAt(OffsetDateTime answersUpdatedAt) {
        this.answersUpdatedAt = answersUpdatedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final StackoverflowQuestions other = (StackoverflowQuestions) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.questionId == null) {
            if (other.questionId != null)
                return false;
        }
        else if (!this.questionId.equals(other.questionId))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.answersUpdatedAt == null) {
            if (other.answersUpdatedAt != null)
                return false;
        }
        else if (!this.answersUpdatedAt.equals(other.answersUpdatedAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.questionId == null) ? 0 : this.questionId.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.answersUpdatedAt == null) ? 0 : this.answersUpdatedAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StackoverflowQuestions (");

        sb.append(id);
        sb.append(", ").append(questionId);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(answersUpdatedAt);

        sb.append(")");
        return sb.toString();
    }
}
