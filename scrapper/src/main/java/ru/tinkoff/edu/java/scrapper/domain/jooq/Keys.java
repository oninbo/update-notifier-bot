/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.Databasechangeloglock;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.GithubRepositories;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.Links;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.StackoverflowQuestions;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.TgChats;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.DatabasechangeloglockRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.GithubRepositoriesRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.LinksRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.StackoverflowQuestionsRecord;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.TgChatsRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<GithubRepositoriesRecord> GITHUB_REPOSITORIES_PK = Internal.createUniqueKey(GithubRepositories.GITHUB_REPOSITORIES, DSL.name("github_repositories_pk"), new TableField[] { GithubRepositories.GITHUB_REPOSITORIES.ID }, true);
    public static final UniqueKey<GithubRepositoriesRecord> UNIQUE_NAME_USER = Internal.createUniqueKey(GithubRepositories.GITHUB_REPOSITORIES, DSL.name("unique_name_user"), new TableField[] { GithubRepositories.GITHUB_REPOSITORIES.NAME, GithubRepositories.GITHUB_REPOSITORIES.USERNAME }, true);
    public static final UniqueKey<LinksRecord> LINKS_PK = Internal.createUniqueKey(Links.LINKS, DSL.name("links_pk"), new TableField[] { Links.LINKS.ID }, true);
    public static final UniqueKey<LinksRecord> UNIQUE_GITHUB_REPOSITORY_ID_TG_CHAT_ID = Internal.createUniqueKey(Links.LINKS, DSL.name("unique_github_repository_id_tg_chat_id"), new TableField[] { Links.LINKS.TG_CHAT_ID, Links.LINKS.GITHUB_REPOSITORY_ID }, true);
    public static final UniqueKey<LinksRecord> UNIQUE_STACKOVERFLOW_QUESTION_ID_TG_CHAT_ID = Internal.createUniqueKey(Links.LINKS, DSL.name("unique_stackoverflow_question_id_tg_chat_id"), new TableField[] { Links.LINKS.TG_CHAT_ID, Links.LINKS.STACKOVERFLOW_QUESTION_ID }, true);
    public static final UniqueKey<StackoverflowQuestionsRecord> STACKOVERFLOW_QUESTIONS_PK = Internal.createUniqueKey(StackoverflowQuestions.STACKOVERFLOW_QUESTIONS, DSL.name("stackoverflow_questions_pk"), new TableField[] { StackoverflowQuestions.STACKOVERFLOW_QUESTIONS.ID }, true);
    public static final UniqueKey<StackoverflowQuestionsRecord> UNIQUE_QUESTION_ID = Internal.createUniqueKey(StackoverflowQuestions.STACKOVERFLOW_QUESTIONS, DSL.name("unique_question_id"), new TableField[] { StackoverflowQuestions.STACKOVERFLOW_QUESTIONS.QUESTION_ID }, true);
    public static final UniqueKey<TgChatsRecord> TG_CHATS_PK = Internal.createUniqueKey(TgChats.TG_CHATS, DSL.name("tg_chats_pk"), new TableField[] { TgChats.TG_CHATS.ID }, true);
    public static final UniqueKey<TgChatsRecord> UNIQUE_CHAT_ID = Internal.createUniqueKey(TgChats.TG_CHATS, DSL.name("unique_chat_id"), new TableField[] { TgChats.TG_CHATS.CHAT_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<LinksRecord, GithubRepositoriesRecord> LINKS__GITHUB_REPOSITORY_FK = Internal.createForeignKey(Links.LINKS, DSL.name("github_repository_fk"), new TableField[] { Links.LINKS.GITHUB_REPOSITORY_ID }, Keys.GITHUB_REPOSITORIES_PK, new TableField[] { GithubRepositories.GITHUB_REPOSITORIES.ID }, true);
    public static final ForeignKey<LinksRecord, StackoverflowQuestionsRecord> LINKS__STACKOVERFLOW_QUESTION_FK = Internal.createForeignKey(Links.LINKS, DSL.name("stackoverflow_question_fk"), new TableField[] { Links.LINKS.STACKOVERFLOW_QUESTION_ID }, Keys.STACKOVERFLOW_QUESTIONS_PK, new TableField[] { StackoverflowQuestions.STACKOVERFLOW_QUESTIONS.ID }, true);
    public static final ForeignKey<LinksRecord, TgChatsRecord> LINKS__TG_CHAT_ID_FK = Internal.createForeignKey(Links.LINKS, DSL.name("tg_chat_id_fk"), new TableField[] { Links.LINKS.TG_CHAT_ID }, Keys.TG_CHATS_PK, new TableField[] { TgChats.TG_CHATS.ID }, true);
}
