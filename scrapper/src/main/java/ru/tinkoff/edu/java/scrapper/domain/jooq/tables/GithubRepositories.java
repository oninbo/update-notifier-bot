/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tinkoff.edu.java.scrapper.domain.jooq.Keys;
import ru.tinkoff.edu.java.scrapper.domain.jooq.Public;
import ru.tinkoff.edu.java.scrapper.domain.jooq.tables.records.GithubRepositoriesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GithubRepositories extends TableImpl<GithubRepositoriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.github_repositories</code>
     */
    public static final GithubRepositories GITHUB_REPOSITORIES = new GithubRepositories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GithubRepositoriesRecord> getRecordType() {
        return GithubRepositoriesRecord.class;
    }

    /**
     * The column <code>public.github_repositories.id</code>.
     */
    public final TableField<GithubRepositoriesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.github_repositories.name</code>.
     */
    public final TableField<GithubRepositoriesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.github_repositories.username</code>.
     */
    public final TableField<GithubRepositoriesRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.github_repositories.created_at</code>.
     */
    public final TableField<GithubRepositoriesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.github_repositories.updated_at</code>.
     */
    public final TableField<GithubRepositoriesRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.github_repositories.issues_updated_at</code>.
     */
    public final TableField<GithubRepositoriesRecord, OffsetDateTime> ISSUES_UPDATED_AT = createField(DSL.name("issues_updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private GithubRepositories(Name alias, Table<GithubRepositoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private GithubRepositories(Name alias, Table<GithubRepositoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.github_repositories</code> table reference
     */
    public GithubRepositories(String alias) {
        this(DSL.name(alias), GITHUB_REPOSITORIES);
    }

    /**
     * Create an aliased <code>public.github_repositories</code> table reference
     */
    public GithubRepositories(Name alias) {
        this(alias, GITHUB_REPOSITORIES);
    }

    /**
     * Create a <code>public.github_repositories</code> table reference
     */
    public GithubRepositories() {
        this(DSL.name("github_repositories"), null);
    }

    public <O extends Record> GithubRepositories(Table<O> child, ForeignKey<O, GithubRepositoriesRecord> key) {
        super(child, key, GITHUB_REPOSITORIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<GithubRepositoriesRecord> getPrimaryKey() {
        return Keys.GITHUB_REPOSITORIES_PK;
    }

    @Override
    public List<UniqueKey<GithubRepositoriesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_NAME_USER);
    }

    @Override
    public GithubRepositories as(String alias) {
        return new GithubRepositories(DSL.name(alias), this);
    }

    @Override
    public GithubRepositories as(Name alias) {
        return new GithubRepositories(alias, this);
    }

    @Override
    public GithubRepositories as(Table<?> alias) {
        return new GithubRepositories(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GithubRepositories rename(String name) {
        return new GithubRepositories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GithubRepositories rename(Name name) {
        return new GithubRepositories(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GithubRepositories rename(Table<?> name) {
        return new GithubRepositories(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
